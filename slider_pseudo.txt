Add OpenCV Sliders For:
  - Hue
  - Saturation
  - Value
  - Percentage

Numpy HStacked Windows:
  - Camera Frame
  - HSV Mask
  - Blob Mask
  
  
 Code:

class Blob_Window:
	def __init__(self, window_name="Control Panel", size=(640, 240)):
		self.window_name = window_name
	
		self.window = cv2.namedWindow(window_name)
		cv2.resizeWindow(window_name, *size)

		# Define default slider values
		self.hsv_values = ((0, 0, 0), (179, 255, 255))

		# Construct Trackbar Objects
		cv2.createTrackbar("Hue Min", window_name, 0, 179, self.on_trackbar)
		cv2.createTrackbar("Hue Max", window_name, 179, 179, self.on_trackbar)
		cv2.createTrackbar("Sat Min", window_name, 0, 255, self.on_trackbar)
		cv2.createTrackbar("Sat Max", window_name, 255, 255, self.on_trackbar)
		cv2.createTrackbar("Val Min", window_name, 0, 255, self.on_trackbar)
		cv2.createTrackbar("Val Max", window_name, 255, 255, self.on_trackbar)
		
		# Construct Checkbox Objects
		cv2.createButton("Detect Blobs", window_name, self.on_checkbox, 1, 0)
		cv2.createButton("Detect
		
		
    		# Instantiate Sliders On Runtime
		self.update_masks(0)
		
		# Construct Additional CheckBox Parameters
		self.blob_params = {
			"filterByArea": False,
			"filterByCircularity": False,
			"filterByConvexity": False,
			"filterByInertia": False,
			"minArea": 0,
			"minCircularity": 0,
			"minConvexity": 0,
			"minInertia": 0
		}
		
		self.show_blobs = False

	def on_trackbar(self, val):
		hue_min = cv2.getTrackbarPos("Hue Min", self.window_name)		
		hue_max = cv2.getTrackbarPos("Hue Max", "TrackedBars")
		sat_min = cv2.getTrackbarPos("Sat Min", "TrackedBars")
		sat_max = cv2.getTrackbarPos("Sat Max", "TrackedBars")
		val_min = cv2.getTrackbarPos("Val Min", "TrackedBars")
		val_max = cv2.getTrackbarPos("Val Max", "TrackedBars")
		
		self.hsv_values = (
			(hue_min, sat_min, val_min),
			(hue_max, sat_max, val_max)
		)
		
	def on_checkbox(self, val):
		self.show_blobs = cv2.getCheckboxStatus(

	def stream(self, exit_keys={'q', 27}):
		ascii_keys = {}
	
		for key in exit_keys:
			if key is str:	
				ascii_keys.add(ord(key))
			else:
				ascii_keys.add(key)
			
		while True:
			cam = cv2.VideoCapture(0)
			active, frame = cam.read()
			
			if active:
				hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				hsv_mask = cv2.inRange(frame, self.hsv_values[0], self.hsv_values[1])
				
				if self.show_blobs:
					blobs = blob_utils.detect_blobs(frame, **self.blob_params)
					
				
				
			key = cv2.waitKey(1)
			break if key in ascii_keys
		
		cam.release()
		cv2.destroyAllWindows()
					
def main():
	window = Blob_Window()
	window.stream()
